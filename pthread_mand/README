
The idea here is to load up the POSIX thread work queue model with a
pile of work that represents the computation needed on a region of the
mandlebrot fractal. 

At the moment the region of the mandlebrot in previous code tests was
rendered on screen as a 1024 x 1024 square pixel grid. Each pixel may
represent a single sample computation or an average of a set or even
a statistical model applied to a set. Regardless we generally break
up the work into regions of smaller work. Previously we used a sample
grid that was 16 x 16 smaller squares inside the mandlebrot region of
interest.  Consider the following trivial case : 

    magnify = 64 = m

     centre = ( -1.75, 0.0 ) = ( r0, c0 )

The mandlebrot is only of interest within a circle of radius 2 and at
the origin and thus we generally think that a magnify of 1 will cover
a region on the complex place from ( -2, -2 ) to ( 2, 2 ) and thus we
have a square width and height of 4 units.  The magnify value of 64
simply means that this width and height are divided by 64 to give us
a region centered at ( -1.75, 0.0 ) with a width and height of 4/64
or simply 1/16th of a unit.  What are the complex coordinates of the
lower left corner of this region?

       real lower left = r00 = r0 - 1/2 * ( 4 / m )
                             = r0 - 2 / m
                             = -1.75 - 2 / 64
                             = -1.78125

    complex lower left = c00 = c0 - 1/2 * ( 4 / m )
                             = c0 - 2 / m
                             = 0.0 - 2 / 64
                             = -0.03125

    Thus the overall lower left coordinate on the complex plane
    for the entire sample space will be : 

    ( r00, c00 ) = (  ( r0 - 2 / m )  ,  ( c0 - 2 / m )  )

We will then need a solution for any given work area within the overall
set. The surface is currently broken up into a 16x16 grid of smaller
work areas and we label them as 0 to 15 on both the real and complex
axi. Thus we have our lowest left corner as ( r00, c00 ) and the upper
right region will be ( r15, c15 ) for the real and complex coordinates.

In general : 

    rx = r00 + ( 4.0 * x ) / ( 16 * m ) = r00 + x / ( 4 * m )

    cy = c00 + ( 4.0 * y ) / ( 16 * m ) = c00 + y / ( 4 * m )

Thus for the work area we label as [ 4, 10 ] we see : 

    r4 = r00 + ( 4.0 * x ) / ( 16 * m )
       = -1.78125 + ( 4.0 * 4 ) / ( 16 * 64 )
       = -1.78125 + 16/1024
       = -1.765625

   c10 = c00 + ( 4.0 * y ) / ( 16 * m )
       = -0.03125 + ( 4.0 * 10 ) / ( 16 * 64 )
       = -0.03125 + 40 / 1024
       = -0.03125 + 10 / 256
       = -0.03125 + 0.0390625
       =  0.0078125


A slightly more detailed example would be for magnify = 2^22 = 4194304
and a centre point of ( -1.249971859332, -0.007747944619038 ).

    ( r00, c00 ) = (  ( r0 - 2 / m )  ,  ( c0 - 2 / m )  )

    r00 = r0 - 2 / m = -1.249971859332 - 2/(2^22)
        = -1.249971859332 - 2^(-21)
        = -1.249971859332 - 0.000000476837158203125
        = -1.249972336169158203125

    c00 = c0 - 2 / m = -0.007747944619038 - 2/(2^22)
        = -0.007747944619038 - 2^(-21)
        = -0.007747944619038 - 0.000000476837158203125
        = -0.007748421456196203125

Then we can try the work area [ 4, 10 ] similar to our trivial test case 
thus : 

     r4 = r00 + ( 4.0 * x ) / ( 16 * m )
        = -1.249972336169158203125 + ( 4.0 * 4 ) / ( 16 * 2^22 )
        = -1.249972336169158203125 + 4 / ( 4 * 2^22 )
        = -1.249972336169158203125 + ( 2^(-22) )
        = -1.249972336169158203125 + 0.0000002384185791015625
        = -1.2499720977505791015625

    c10 = c00 + ( 4.0 * y ) / ( 16 * m )
        = -0.007748421456196203125 + ( 4.0 * 10 ) / ( 16 * 2^22 )
        = -0.007748421456196203125 + 10 / ( 4 * 2^22 )
        = -0.007748421456196203125 + 10 / ( 2^24 )
        = -0.007748421456196203125 + 0.00000059604644775390625
        = -0.00774782540974844921875

At the moment the software agrees to within reasonable error for FP64
type data elements : 

        vbox  [ 004 , 010 ]
        c = ( -1.2499720977505790e+00, -7.7478254097484494e-03 )


